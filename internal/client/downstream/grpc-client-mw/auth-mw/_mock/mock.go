// Code generated by MockGen. DO NOT EDIT.
// Source: ./../interceptor.go
//
// Generated by this command:
//
//	mockgen -source ./../interceptor.go -destination ./mock.go -package _mock
//

// Package _mock is a generated GoMock package.
package _mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MocksessionStorage is a mock of sessionStorage interface.
type MocksessionStorage struct {
	ctrl     *gomock.Controller
	recorder *MocksessionStorageMockRecorder
	isgomock struct{}
}

// MocksessionStorageMockRecorder is the mock recorder for MocksessionStorage.
type MocksessionStorageMockRecorder struct {
	mock *MocksessionStorage
}

// NewMocksessionStorage creates a new mock instance.
func NewMocksessionStorage(ctrl *gomock.Controller) *MocksessionStorage {
	mock := &MocksessionStorage{ctrl: ctrl}
	mock.recorder = &MocksessionStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksessionStorage) EXPECT() *MocksessionStorageMockRecorder {
	return m.recorder
}

// GetToken mocks base method.
func (m *MocksessionStorage) GetToken(ctx context.Context) *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", ctx)
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetToken indicates an expected call of GetToken.
func (mr *MocksessionStorageMockRecorder) GetToken(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MocksessionStorage)(nil).GetToken), ctx)
}
